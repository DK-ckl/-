# 游戏会用到一个引擎，它带动一张充满房间和场景的地图。当玩家进入一个房间时，这个房间会显示出自己的描述，并且会告诉引擎下一步应该到那个房间去
from sys import exit
from random import randint # randint(a,b)函数：从整数a到b返回一个随机整数
from textwrap import dedent # dedent()：消除三个引号的多余空白，目的是为了统一代码风格



class Engine(object): #游戏引擎，接收初始地图，运行初始场景，然后进行场景切换

    def __init__(self, scene_map):
        self.scene_map = scene_map

    def play(self):
        current_map = self.scene_map.opening_scene() #当前场景
        last_scene = self.scene_map.next_scene('finished') #最后一个场景

        while current_map != last_scene: #利用while循环实现场景切换功能
            next_scene_name = current_map.enter() # 关键语句，进行每一个场景
            current_map = self.scene_map.next_scene(next_scene_name) # 通过每一个场景结束后返回的下一个场景的键，从地图中的字典中找到对应键的值：下一个场景

            # for x,y in self.scene_map.scenes.items():
            #     if y == current_map:
            #         print(x)

        # be sure to print out the last scene
        current_map.enter()

class Scene(object):

    def enter(self):
        print("This scene is not yet configured.")
        print("Subclass it and implement enter().")
        exit(1)

class Death(Scene):

    # 定义列表，存放死亡消息
    quips = [
            "你死了。有点不好意思。",
	        "如果你更聪明，你的妈妈会感到自豪。",
            "你这个糟糕的的失败者。",
	        "我有一只小狗在这方面比你做得更好。",
            "你他娘的糟糕透了。"
    ]

    # 定义函数，实现游戏重新开始功能
    def choice(): #实现过关失败后重新再来
        x = input(">是否继续（是/否）： ")
        if x == '是':
            Engine(Map('central_corridor')).play()
        elif x =='否':
            exit(0)

    def enter(self):
        print(Death.quips[randint(0, len(self.quips)-1)]) # 从列表中随机得到一个
        Death.choice()

class CentralCorridor(Scene):

    def enter(self):
        print(dedent("""
        5号星球的Gothons入侵了你的飞船并摧毁了你所有的船员。
        你是最后一个幸存的成员，你的最后一个任务是从武器库里取出中子毁灭炸弹，把它放在舰桥上，进入逃生舱后炸毁飞船。
        你正沿着中央走廊跑到武器库，突然有个哥坦人跳出来，红色鳞片状皮肤，深色肮脏的身体。
        他挡住了军械库的门，准备用武器炸了你。
        """))

        action = input('你将如何做(射击/躲闪/说个笑话)： ')

        if action == "射击":
            print(dedent("""
            快拔出你的爆能枪，朝哥顿人开火。
            他的小丑服装在他的身体周围流动和移动，这使你不能瞄准。
            这完全毁了他全新的服装，但却完全错过了他,
            这让他暴跳如雷不停地打你的脸，直到你死。
            然后他会吃掉你。
            """))
            return 'death'

        elif action == "躲闪":
            print(dedent("""
            就像一名世界级的拳击手，你躲闪、迂回、滑动、右滑，Gothon的爆破器发出激光从你的头上飞过。
            在你巧妙的闪避过程中你的脚滑了一下你的头撞到了金属墙上然后晕过去了。
            你醒来后不久就会死，因为Gothon会踩到你的头并吃掉你。
            """))
            return 'death'

        elif action == '说个笑话':
            print(dedent("""
            幸运的是，他们让你学会了Gothon在学院里的侮辱。
            你讲了一个你知道的哥顿笑话
            jura fur fvgf nebhaq gur ubhfr, jura fur fvgf nebhaq gur ubhfr。
            哥顿人停下来，试着不笑，然后大笑起来，动弹不得。
            当他在笑的时候，你跑上去朝他的头部开一枪，把他撂倒，然后穿过武器库的门。
            """))

            return 'laser_weapon_armory'

        else:
            print("DOES NOT COMPUTE!")
            return 'central_corridor'

class LaserWeaponArmory(Scene):

    def enter(self):
        print(dedent("""
            你进入武器军械库潜水，蹲伏并扫描房间以寻找可能隐藏的更多Gothons。
            它很安静，太安静了。 你站起来跑到房间的另一边，在它的容器里找到了中子炸弹。
            盒子上有一个密码锁，你需要密码来取出炸弹。
            如果你的密码错误10次，那么锁会永远关闭，你无法得到炸弹。
            代码是2位数。
            """))

        code = f"{randint(1,9)}{randint(1,9)}"

        guess = input("[请输入密码]> ")
        guesses = 1


        while guess != code and guesses < 10:
            if int(guess) < int(code):
                print('数字小了...')
            else:
                print('数字大了...')

            print("密码错误!")
            if guess != code:
                print(f"你已错误输入{guesses}次密码，还有{10-guesses}次机会！")
                guesses +=1
                guess = input("[请输入密码]> ")
            else:
                pass


        if guess == code:
            print(dedent("""
                恭喜你！成功打开密码锁。
                容器咔嗒一声打开，密封破裂，让气体排出。
                你抓住中子弹并尽可能快地跑到桥上，你必须将它放在正确的位置。
                """))
            return 'the_bridge'
        else:
            print(dedent("""
                锁最后一次发出嗡嗡声，然后当机制融合在一起时，你会听到令人作呕的融化声。
                你决定坐在那里，你死了。
                """))
            return 'death'

class TheBridge(Scene):

    def enter(self):
        print(dedent("""
            你拿着在你的臂弯下的中子毁灭炸弹冲上了舰桥。
            5个正在舰桥上的的Gothons小队感到惊讶。
            但是他们没有把他们的武器拿出来。
            因为他们看到了你身上的活跃炸弹，不想把让它炸掉。
            """))
        action = input("你将如何做(炸他们/威胁他们)： ")

        if action == "炸他们":
            print(dedent("""
                在恐慌中，你将炸弹扔到Gothons小队并向门进行跳跃。
                就在你放下它的时候，Gothon会在后面向你射击，杀死你。
                当你死去的时候，你会看到Gothon疯狂地试图解除炸弹的武装。
                你知道他们可能会在它熄火时爆炸。
                """))
            return 'death'
        elif action == "威胁他们":
            print(dedent("""
                你把你的爆能枪指向你手臂下的炸弹，而Gothons把手举起来开始出汗。
                你向后靠近门，打开它，然后小心翼翼地将炸弹放在地板上，指着你的冲击波。
                 然后你跳回门，按下关闭按钮并敲开锁，这样Gothon就无法离开。
                 既然锁定让Gothons无法脱身。 现在炸弹被放置，你跑到逃生舱下车这个锡罐。
                 """))
            return 'escape_pod'
        else:
            print("DOES NOT COMPUTE")
            return "the_bridge"

class EscapePod(Scene):

    def enter(self):
        print(dedent("""
            在整艘船发生爆炸之前，
            你绝望地冲过船只试图进入逃生舱。 似乎几乎没有任何Gothons在船上，
            所以你的奔跑没有干扰。 你带着逃生舱到达房间，现在需要选择一个。
            其中一些可能是损坏，但你没有时间去看。有5个逃生舱，你选哪一个？
            提示：离你最近的逃生舱看上去似乎不错.
            """))

        good_pod = 1
        guess = input("[从5个逃生舱里选择一个]> ")

        if int(guess)!=good_pod:
            print(dedent(f"""
                你跳进第 {guess}个逃生舱然后点击弹出按钮。
                吊舱逃离空间，然后随着船体破裂爆炸，你的身体被压碎成果冻。
                """))
            return 'death'
        else:
            print(dedent(f"""
                你跳进了第 {guess}个逃生舱然后点击弹出按钮。
                这个吊舱很容易的滑入太空，前往下面的星球。 当它飞向地球时，你回头
                看看你的船内爆然后像一颗明亮的星星一样，同时炸毁了Gothon船。
                你赢了！
                """))
            return 'finished'
class Finished(Scene):

    def enter(self):
        print("You won! Good job!")
        return 'finished'

class Map(object):

    scenes = {
        'central_corridor': CentralCorridor(),
        'laser_weapon_armory': LaserWeaponArmory(),
        'the_bridge': TheBridge(),
        'escape_pod': EscapePod(),
        'death': Death(),
        'finished': Finished()
    }

    def __init__(self,start_scene):
        self.start_scene = start_scene

    def next_scene(self, scene_name):
        val = Map.scenes.get(scene_name)
        return val

    def opening_scene(self):
        return self.next_scene(self.start_scene)

a_map = Map('central_corridor') # 将a_map作为类Map的一个实例，并输入初始地图
a_game = Engine(a_map) # 将a_ganme作为类Engine的一个实例，并输入地图参数
a_game.play() # 从实例a_game中寻找play（）函数：开始游戏
